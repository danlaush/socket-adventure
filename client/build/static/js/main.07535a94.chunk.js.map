{"version":3,"sources":["lib/api.js","App.js","registerServiceWorker.js","index.js"],"names":["socket","socketIOClient","App","props","callApi","a","fetch","fetchedRes","json","data","status","Error","message","config","methods","updateUsers","setIdentity","newMessage","on","users","user","socketConnection","setState","messages","state","endOfMessages","current","scrollIntoView","behavior","userDetails","handleChange","bind","handleSubmit","createRef","name","requestedName","prompt","this","emit","event","target","value","preventDefault","console","log","content","className","map","style","color","ref","onSubmit","type","onChange","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.07535a94.chunk.js","sourcesContent":["import socketIOClient from \"socket.io-client\";\nconst socketUrl = \"https://a4b3aa16.ngrok.io\";\nconst socket = socketIOClient(socketUrl);\n\nconst socketConnection = (config) => {\n  const methods = {\n    updateUsers: config.updateUsers,\n    setIdentity: config.setIdentity,\n    newMessage: config.newMessage,\n  };\n\n  socket.on(\"updateUsers\", (users) => methods.updateUsers(users));\n  socket.on(\"identity\", (user) => methods.setIdentity(user));\n  socket.on(\"newMessage\", (message) => methods.newMessage(message));\n};\n\nconst sendWelcome = (name) => {\n  socket.emit(\"welcome\", name);\n};\n\nconst sendMessage = (message) => {\n  socket.emit(\"message\", message);\n};\n\nexport { socketConnection, sendWelcome, sendMessage };\n","import React, { Component, createRef } from \"react\";\nimport \"./App.css\";\nimport { socketConnection, sendWelcome, sendMessage } from \"./lib/api\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    socketConnection({\n      updateUsers: (updateUsers) => {\n        this.setState({ users: updateUsers });\n      },\n      newMessage: (message) => {\n        this.setState({ messages: [...this.state.messages, message] });\n        this.endOfMessages.current.scrollIntoView({ behavior: 'smooth' })\n      },\n      setIdentity: (userDetails) => {\n        this.setState({ user: userDetails });\n      },\n    });\n\n    this.state = {\n      user: {},\n      users: [],\n      messages: [],\n      message: \"\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.endOfMessages = createRef();\n  }\n\n  componentDidMount() {\n    const requestedName = prompt(\"What is your user name?\");\n    this.name = requestedName ? requestedName : \"wander_one\";\n\n    sendWelcome(this.name);\n  }\n\n  callApi = async () => {\n    const fetchedRes = await fetch(\"/api/hello\");\n    const data = await fetchedRes.json();\n\n    if (fetchedRes.status !== 200) throw Error(data.message);\n\n    return data;\n  };\n\n  handleChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    sendMessage(this.state.message);\n    console.log(\"sent a message\");\n    this.setState({\n      message: \"\",\n      messages: [...this.state.messages, {\n        content: this.state.message,\n        ...this.state.user,\n      }]\n    });\n    this.endOfMessages.current.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  render() {\n    const { users, messages, message } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Chat</h1>\n        </header>\n        <ul>\n          {users.map((user) => (\n            <li style={{ color: user.color }}>{user.name}</li>\n          ))}\n        </ul>\n        <div>\n          {messages.map((message) => (\n            <p style={{color: message.color}}>\n              <strong>{message.name}:</strong> {message.content}\n            </p>\n          ))}\n          <div ref={this.endOfMessages} />\n        </div>\n        <form className=\"Form\" onSubmit={this.handleSubmit}>\n          <input\n            name=\"message\"\n            type=\"text\"\n            value={message}\n            onChange={this.handleChange}\n          />\n          <button type=\"submit\">&raquo;</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}